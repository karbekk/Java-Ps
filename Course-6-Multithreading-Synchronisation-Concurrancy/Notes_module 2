Producer/Consumer pattern using Wait and Notify() methods:
------------------------------------------------------------

A thread executes a task using -> A runnable Interface

In Java 8, since there is only one method run() in the interface -> its called as functional interface.

 4 steps to keep in mind while launching the thread:

 Step 1 : Create an instance of the runnable using normal method or using the lamba expression

 Runnable task = () -> System.out.println("Hello World");

Step  2:

create an instance of the thread using runnable object created above as a parameter

 Thread thread = new Thread(task);


Step 3:

Launch the thread:

thread.start();

Note:

dont call the run method -> thread.run()

this will not call the new thread but executes the run method in the current thread.

------------------------------------

to get the thread name: by using the static method

Thread.currentThread().getName();

-------------------------------------

there is a method to stop the thread which should not be used -> stop() method.

the right method to use to stop the thread is interrupt method().

interrupt sends the signal to thread to stop the task it is executing

the thread calls the isInturrepted() method inside it.
-------------------------------------

Producer-Consumer pattern:

A producer produces the values in the buffer -> lets say in an array
A consumer then consumes the values from this buffer

Note: the thing to take care is if buffer is empty or full

If its full, then the producer should not produce any more value into buffer
if its empty, then consumer should not read any value from the buffer.


Producer and consumer run in their own threads.

Therefore, this buffer is shared among all the threads. And may lead to race condition if not synchronised.

So, solution is to make the consumer wait till the producer produces the values into buffer.

 The consumer should release the key when its parked or waiting state.

 This we can handle using, wait/notify methods. these are the methods from objects class.

 The thread executing these methods should hold the key of the object.

 Therefore, wait and notify must be inside a synchronised block. it cannot be outside the block.

 Calling the wait() method releases the key held by this thread. and the this thread is put into wait state.

 by calling notify on object of this thread wait state is released and puts it in runnable state. this is the only way
 to release a waiting thread. notifyAll() will wake up all the threads in wait state.

---------------------------------------------------------------------------------------

A thread has a state. either running  or not.

A thread cannot be given the time slice by thread scheduler if its in wait list.

Diff states of thread:

1. When thread is created using new state.                          ->  New state
2. When start method is called on the thread its in runnable state. ->  Runnable state
3. Terminated state when thread is no longer can be run             ->  Terminated

4. Waiting at the entrance of the synchronised block because the
   key of the lock object is not available                          ->  Blocked

5. Thread is parked in the waiting list using wait() method
   Notify() method is used to wake up from waiting state            ->  Waiting
6. Parked using a sleep(timeout) or wait(timeout) call.
   Notify() method is not needed                                    ->  Timed_Waiting

----------------------------------------------------------------------------------------

Thread scheduler can run the threads that are in state Runnable.

Blocked thread can only run if the key is released and available to it.

Waiting thread can only run again if notify() method is called.

getState() method of thread class can get the current state of the thread. It returns an enumeration type defined in thread class.

------------------------------------------------------------------------------------

